<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Resco.CustomKeyboard.CF3</name>
    </assembly>
    <members>
        <member name="T:Resco.Controls.Keyboard.KeyPressedEventArgs">
            <summary>
            Provides data for the <see cref="!:KeyPressed"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyPressedEventArgs.#ctor(Resco.Controls.Keyboard.KeyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Resco.Controls.Keyboard.KeyPressedEventArgs"/> class. 
            </summary>
            <param name="aRowIndex"></param>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyPressedEventArgs.Key">
            <summary>
            Gets pressed key's descriptor.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyPressedEventArgs.Handled">
            <summary>
            Gets or sets whether the key was handled.
            </summary>
            <remarks>Set to True, when the keyboard control should not to send 
            the pressed key to the focused control.</remarks>
        </member>
        <member name="T:Resco.Controls.Keyboard.KeyPressedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:KeyPressed"/> event of a Control. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Resco.Controls.Keyboard.Layout">
            <summary>
            Defines a layout in a CustomKeyboard.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.OnRefreshKeyRequired(Resco.Controls.Keyboard.KeyDescriptorEventArgs)">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.Layout.RefreshKeyRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.OnRefreshRequired">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.Layout.RefreshRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.OnResizeRequired">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.Layout.ResizeRequired"/> event. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Resco.Controls.Keyboard.Layout.Dispose" -->
        <member name="M:Resco.Controls.Keyboard.Layout.ShouldSerializeEnableTextOnSkin">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.Layout.EnableTextOnSkin"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.ShouldSerializeName">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.Layout.Name"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.ShouldSerializeKeyList">
            <summary>
            Indicates whether the <see cref="T:Resco.Controls.Keyboard.Keyboard"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.ShouldSerializeWidth">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.Layout.Width"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.ShouldSerializeHeight">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.Layout.Height"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="F:Resco.Controls.Keyboard.Layout.PressedTextOffset">
            <summary>
            The Text's offset to make a shift effect.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.ShouldSerializePressedTextOffset">
            <summary>
            Indicates whether the <see cref="F:Resco.Controls.Keyboard.Layout.PressedTextOffset"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,Resco.Controls.Keyboard.Alignment)">
            <summary>
            Draws the text on top of the button.
            </summary>
            <param name="gr"></param>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.DrawWithSkin(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.Generic.List{Resco.Controls.Keyboard.KeyDescriptor})">
            <summary>
            Draws the whole keyboard layout with the skin image.
            </summary>
            <param name="gr"></param>
            <param name="aRect"></param>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.DrawWithoutSkin(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.Generic.List{Resco.Controls.Keyboard.KeyDescriptor})">
            <summary>
            Draws the whole keyboard layout without the skin image.
            </summary>
            <param name="gr"></param>
            <param name="aRect"></param>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.Invalidate">
            <summary>
            Invalidates the Layout.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Layout.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns>A System.String that represents the current System.Object.</returns>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.EnableTextOnSkin">
            <summary>
            Enables or disables display Text on skin.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.Name">
            <summary>
            Gets or sets the Layout's name.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.KeyDescriptors">
            <summary>
            Gets or sets the list of Key descriptors.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.Width">
            <summary>
            Layout's width.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.Height">
            <summary>
            Layout's height.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.Skin">
            <summary>
            Specifies the default skin.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.SkinSelected">
            <summary>
            Specifies the selected skin.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.SkinDisabled">
            <summary>
            Specifies the disabled skin.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Layout.UseSkin">
            <summary>
            Specifies Layout's skin type.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.SkinType">
            <summary>
            Defines the layout's skin.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.SkinType.None">
            <summary>
            Do not use any skin.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.SkinType.VistaStyle">
            <summary>
            Use the vista style background for keys.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.SkinType.Skin">
            <summary>
            The skin is used from custom image.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.SkinType.Gradient">
            <summary>
            Use the gradient background for keys.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.CustomKeyboard">
            <remarks>
            Using the <see cref="!:KeyText"/> property, you can specify the system keys without writing any custom validation logic in your application.
            </remarks>
        </member>
        <member name="F:Resco.Controls.Keyboard.CustomKeyboard.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ShouldSerializeStretchImage">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.CustomKeyboard.StretchImage"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ShouldSerializeIsVgaDevice">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.CustomKeyboard.IsVgaDevice"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ShouldSerializeAutoCorrectForVgaDevice">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.CustomKeyboard.AutoCorrectForVgaDevice"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ShouldSerializeKeyboardLayouts">
            <summary>
            Indicates whether the <see cref="T:Resco.Controls.Keyboard.Keyboard"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ForceRefresh">
            <summary>
            Implements the method from IParentControl interface.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.HideSipKeyboard(System.Windows.Forms.Form)">
            <summary>
            Hides the SIP keyboard.
            </summary>
            <param name="aParent">Parent form.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ShowSipKeyboard(System.Windows.Forms.Form)">
            <summary>
            Shows the SIP keyboard.
            </summary>
            <param name="aParent">Parent form.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.OnResize(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.Resize event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">A System.Windows.Forms.PaintEventArgs that contains information about the
                control to paint.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.Paint event.
            </summary>
            <param name="e">A System.Windows.Forms.PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.MouseDown event.
            </summary>
            <param name="e">A System.Windows.Forms.MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.MouseUp event.
            </summary>
            <param name="e">A System.Windows.Forms.MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.SendMessage(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Send message.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.GetFocus">
            <summary>
            Gets the control which has the focus.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.LoadXml(System.String,Resco.Controls.Keyboard.CustomKeyboard.DesignTimeCallback)">
            <summary>
            Load the control from the specified <paramref name="location"/>.
            </summary>
            <remarks>You can use filename or any other valid URI as the <paramref name="location"/>.The control properties are set and new templates are loaded from the file created by the <see cref="!:SaveXml"/> method. It is not recommended to change the file manualy.</remarks>
            <param name="location">Location where the XML representation of control is stored.</param>
            <param name="dtc">Reserved for design-time support.</param>
            <example>
            The following sample demonstrates how to load the templates in the runtime:
            </example>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.LoadXml(System.Xml.XmlReader)">
            <summary>
            Load the control from the specified  <paramref name="reader"/>.
            </summary>
            <remarks>The control properties are set and new templates are loaded from the file created by the <see cref="!:SaveXml"/> method. It is not recommended to change the file manualy.</remarks>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> with the control parameters.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.LoadXml(System.String)">
            <summary>
            Load the control from the specified <paramref name="location"/>.
            </summary>
            <remarks>You can use filename or any other valid URI as the <paramref name="location"/>.The control properties are set and new templates are loaded from the file created by the <see cref="!:SaveXml"/> method. It is not recommended to change the file manualy.</remarks>
            <param name="location">Location where the XML representation of control is stored.</param>
            <example>
            The following sample demonstrates how to load the templates in the runtime:
            </example>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Scales Control.
            </summary>
            <param name="factor">The factor by which the height and width of the control will be scaled.</param>
            <param name="specified">A System.Windows.Forms.BoundsSpecified value that specifies the bounds of
                the control to use when defining its size and position.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ShiftTurnOn">
            <summary>
            Turns on the "shift".
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.ShiftTurnOff">
            <summary>
            Turns off the "shift".
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.SendBackspace">
            <summary>
            Sends the Backspace.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.SendKeys(System.String)">
            <summary>
            Sends the custom key.
            </summary>
            <remarks>
            A quote from "http://msdn2.microsoft.com/library/k3w7761b.aspx":
            Each key is represented by one or more characters. To specify a single keyboard character, 
            use the character itself. For example, to represent the letter A, pass in the string "A" to 
            the method. To represent more than one character, append each additional character to the 
            one preceding it. To represent the letters A, B, and C, specify the parameter as "ABC".
            
            The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special 
            meanings to SendKeys. To specify one of these characters, enclose it within braces ({}). 
            For example, to specify the plus sign, use "{+}". To specify brace characters, use "{{}" 
            and "{}}". Brackets ([ ]) have no special meaning to SendKeys, but you must enclose them 
            in braces.
            
            To specify that any combination of SHIFT (+), CTRL (^), and ALT (%) should be held down while several 
            other keys are pressed, enclose the code for those keys in parentheses. For example, to 
            specify to hold down SHIFT while E and C are pressed, use "+(EC)". To specify to hold down 
            SHIFT while E is pressed, followed by C without SHIFT, use "+EC".
            
            To specify repeating keys, use the form {key number}. You must put a space between key 
            and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} 
            means press H 10 times.
            </remarks>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.SendControlC">
            <summary>
            Sends the "control"+ "C" to keyboard.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.SendControlV">
            <summary>
            Sends the "control"+ "V" to keyboard.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustomKeyboard.SendControlX">
            <summary>
            Sends the "control"+ "X" to keyboard.
            </summary>
        </member>
        <member name="E:Resco.Controls.Keyboard.CustomKeyboard.KeyboardKeyDown">
            <summary>
            Occurs when a key was pressed down.
            </summary>
        </member>
        <member name="E:Resco.Controls.Keyboard.CustomKeyboard.KeyboardKeyUp">
            <summary>
            Occurs when a key was released.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.CustomKeyboard.StretchImage">
            <summary>
            Gets or sets whether to stretch the skin image.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.CustomKeyboard.IsVgaDevice">
            <summary>
            Gets or sets the resolution correction for VGA devices.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.CustomKeyboard.AutoCorrectForVgaDevice">
            <summary>
            Gets or sets the resolution correction for VGA devices.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.CustomKeyboard.KeyboardLayouts">
            <summary>
            Gets or sets the current Keyboard.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.CustomKeyboard.DebugMode">
            <summary>
            In debug mode control shows the keys on skin.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.CustomKeyboard.ActiveLayoutIndex">
            <summary>
            Gets or sets the active Layout's index.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.CustomKeyboard.Size">
            <summary>
            Gets or sets the height and width of the control.
            </summary>
            <return>
            The System.Drawing.Size that represents the height and width of the control in pixels.
            </return>
        </member>
        <member name="T:Resco.Controls.Keyboard.CustomKeyboard.DesignTimeCallback">
            <summary>
            For internal use only.
            </summary>
            <param name="o"></param>
            <param name="o2"></param>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptorCollection.OnRefreshKeyRequired(Resco.Controls.Keyboard.KeyDescriptorEventArgs)">
            <summary>
            Raises the <see cref="!:RefreshRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptorCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptorCollection.Add(Resco.Controls.Keyboard.KeyDescriptor)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="anItem">The KeyDescriptor to add to the collection.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptorCollection.Remove(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="anIndex">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptorCollection.IndexOf(Resco.Controls.Keyboard.KeyDescriptor)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the collection or in a portion of it.
            </summary>
            <param name="value">An object representing the KeyDescriptor to locate in the collection. .</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
            <remarks>
            The <b>IndexOf</b> method enables you to determine where an shortcut is located within the collection.
            To determine if an shortcut is located within the collection before calling this method, use the <see cref="!:Resco.Controls.OutlookControls.ShortcutsCollection.Contains"/> method.
            </remarks>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptorCollection.Item(System.Int32)">
            <summary>
            Gets or sets the KeyDescriptor at the specified index within the collection.
            </summary>
            <param name="index">The index of the KeyDescriptor in the collection to set or retrieve.</param>
            <value>
            An item representing the KeyDescriptor located at the specified index within the collection.
            </value>
        </member>
        <member name="T:Resco.Controls.Keyboard.KeyDescriptor">
            <summary>
            KeyDescriptor describes a key in a CustomKeyboard.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.OnRefreshKeyRequired">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.KeyDescriptor.RefreshKeyRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeGradientBackColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.GradientBackColor"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeDisabledGradientBackColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.DisabledGradientBackColor"/> property should be persisted. 
            </summary>
            <returns>
            <b>true</b> if the property value has changed from its default; otherwise, <b>false</b>. 
            </returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeText">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.Text"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeKeyText">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.KeyText"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeKeys">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.Keys"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.BackColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.ForeColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeSelectedBackColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.SelectedBackColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeSelectedForeColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.SelectedForeColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeBorderStyle">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.BorderStyle"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.BorderColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeBorderWidth">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.BorderWidth"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeIsFunctionKey">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.IsFunctionKey"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeIsIrregularKey">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.IsIrregularKey"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ShouldSerializeToughMargin">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.KeyDescriptor.ToughMargin"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Resco.Controls.Keyboard.KeyDescriptor"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptor.ToString">
            <summary>
            Returns a System.String that represents the current KeyDescriptor.
            </summary>
            <returns>A System.String that represents the current KeyDescriptor.</returns>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.GradientBackColor">
            <summary>
            Gets or sets the gradient back color.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.DisabledGradientBackColor">
            <summary>
            Gets or sets the gradient back color, when the key is disabled.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.Text">
            <summary>
            Gets or sets the label text of the key, when the skin is turned off.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.KeyValueSource">
            <summary>
            Gets or sets the source of the key value.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.Name">
            <summary>
            The name of the KeyDescriptor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Resco.Controls.Keyboard.KeyDescriptor.KeyText" -->
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.Keys">
            <summary>
            Gets or sets the Keys value.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.BackColor">
            <summary>
            Back color of the key.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.ForeColor">
            <summary>
            Fore color of the key.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.SelectedBackColor">
            <summary>
            Back color of the selected key.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.SelectedForeColor">
            <summary>
            Fore color of the selected key.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.Font">
            <summary>
            The font used to display text in the control.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.TextFormat">
            <summary>
            The string format used to display text in the control.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.TextAlignment">
            <summary>
            The text's alignment.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.Enabled">
            <summary>
            Gets or sets a value indicating whether the key can respond to user interaction.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.ToughBounds">
            <summary>
            The border of the key.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.Bounds">
            <summary>
            The Bounds of the key.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.BorderStyle">
            <summary>
            The border's style.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.BorderColor">
            <summary>
            Border's color.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.BorderWidth">
            <summary>
            Specifies the border's width.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.IsFunctionKey">
            <summary>
            Indicates whether the key is a Function Key.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.IsIrregularKey">
            <summary>
            Indicates whether the key is an irregular Key. (E.g.: "Cancel" button)
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptor.ToughMargin">
            <summary>
            Tough margin.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.KeyDescriptor.KeyDataSource">
            <summary>
            Specifies the source of the key value.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.KeyDescriptor.KeyDataSource.KeyText">
            <summary>
            KeyText property is the main source.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.KeyDescriptor.KeyDataSource.Keys">
            <summary>
            Keys property is the main source.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.SendMyKeys">
            <summary>
            Provides methods for sending keystrokes to an application.
            </summary>
            <remarks>
            A quote from "http://msdn2.microsoft.com/library/k3w7761b.aspx":
            Each key is represented by one or more characters. To specify a single keyboard character, 
            use the character itself. For example, to represent the letter A, pass in the string "A" to 
            the method. To represent more than one character, append each additional character to the 
            one preceding it. To represent the letters A, B, and C, specify the parameter as "ABC".
            
            The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special 
            meanings to SendKeys. To specify one of these characters, enclose it within braces ({}). 
            For example, to specify the plus sign, use "{+}". To specify brace characters, use "{{}" 
            and "{}}". Brackets ([ ]) have no special meaning to SendKeys, but you must enclose them 
            in braces.
            
            To specify that any combination of SHIFT (+), CTRL (^), and ALT (%) should be held down while several 
            other keys are pressed, enclose the code for those keys in parentheses. For example, to 
            specify to hold down SHIFT while E and C are pressed, use "+(EC)". To specify to hold down 
            SHIFT while E is pressed, followed by C without SHIFT, use "+EC".
            
            To specify repeating keys, use the form {key number}. You must put a space between key 
            and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} 
            means press H 10 times.
            </remarks>
        </member>
        <member name="M:Resco.Controls.Keyboard.SendMyKeys.Send(System.String)">
            <summary>
            Sends keystrokes to the active application.
            </summary>
            <param name="keys">The string of keystrokes to send.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.SendMyKeys.ShiftTurnOn">
            <summary>
            Turns on the "shift".
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.SendMyKeys.ShiftTurnOff">
            <summary>
            Turns off the "shift".
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.SendMyKeys.SendControlC">
            <summary>
            Sends the "control"+ "C" to keyboard.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.SendMyKeys.SendControlV">
            <summary>
            Sends the "control"+ "V" to keyboard.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.SendMyKeys.SendControlX">
            <summary>
            Sends the "control"+ "X" to keyboard.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.KeyDescriptorEventArgs">
            <summary>
            Provides data for the <see cref="!:RefreshRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.KeyDescriptorEventArgs.#ctor(Resco.Controls.Keyboard.KeyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Resco.Controls.Keyboard.KeyPressedEventArgs"/> class. 
            </summary>
            <param name="aRowIndex"></param>
        </member>
        <member name="P:Resco.Controls.Keyboard.KeyDescriptorEventArgs.Key">
            <summary>
            Gets pressed key's descriptor.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.RefreshKeyRequiredEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:RefreshKeyRequired"/> event of a Control. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Resco.Controls.Keyboard.Alignment">
            <summary>
            Defines the alignment of text, image or other content.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.TopLeft">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.TopCenter">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.TopRight">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.MiddleLeft">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.MiddleCenter">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.MiddleRight">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.BottomLeft">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.BottomCenter">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.Alignment.BottomRight">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.SipController.GetFocus">
            <summary>
            Get focus.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.GradientColor">
            <summary>
            Represents a gradient color.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.#ctor">
            <summary>
            Initializes a new instance of the GradientColor class. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.#ctor(Resco.Controls.Keyboard.FillDirection)">
            <summary>
            Initializes a new instance of the GradientColor class.
            </summary>
            <param name="fillDirection">Fill direction.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the GradientColor class.
            </summary>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.#ctor(System.Drawing.Color,System.Drawing.Color,Resco.Controls.Keyboard.FillDirection)">
            <summary>
            Initializes a new instance of the GradientColor class.
            </summary>
            <param name="startColor">Start color.</param>
            <param name="endColor">End color.</param>
            <param name="fillDirection">Fill direction.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.DrawGradient(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the gradient at the specified rectangle to the specified graphics. 
            </summary>
            <param name="gr">Graphics to be gradient drawn.</param>
            <param name="rc">Rectangle to be gradient drawn.</param>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.DrawVistaGradient(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the vista gradient at the specified rectangle to the specified graphics.
            </summary>
            <param name="gr">Graphics to be gradient drawn.</param>
            <param name="rc">Rectangle to be gradient drawn.</param>
            <remarks><b>DrawVistaGradient</b> will use StartColor only to draw gradient.</remarks>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.CanDraw">
            <summary>
            Determine whether the gradient could be drawn.
            </summary>
            <returns><b>true</b> if the gradient could be drawn, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.ShouldSerializeStartColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.GradientColor.StartColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.ShouldSerializeEndColor">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.GradientColor.EndColor"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.ShouldSerializeFillDirection">
            <summary>
            Indicates whether the <see cref="P:Resco.Controls.Keyboard.GradientColor.FillDirection"/> property should be persisted. 
            </summary>
            <returns><c>true</c> if the property value has changed from its default; otherwise, <c>false</c>.</returns>	
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientColor.OnPropertyChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.GradientColor.PropertyChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Resco.Controls.Keyboard.GradientColor.PropertyChanged">
            <summary>
            Notify the parent control when some property was changed.
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.GradientColor.StartColor">
            <summary>
            Gets or sets the starting color of the gradient. 
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.GradientColor.EndColor">
            <summary>
            Gets or sets the ending color of the gradient. 
            </summary>
        </member>
        <member name="P:Resco.Controls.Keyboard.GradientColor.FillDirection">
            <summary>
            Gets or sets the direction of the gradient.
            </summary>
        </member>
        <member name="T:Resco.Controls.Keyboard.FillDirection">
            <summary>
            The direction of the gradient will fill.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.FillDirection.Horizontal">
            <summary>
            The fill goes horizontally.
            </summary>
        </member>
        <member name="F:Resco.Controls.Keyboard.FillDirection.Vertical">
            <summary>
            The fill goes vertically. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.GradientFill.GetAssemblyVersion">
            <summary>
            Gets the current application's or DLL's assembly version.
            </summary>
            <returns>Assembly version.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.ColorFromString(System.String)">
            <summary>
            Converts string representation of color to <see cref="T:System.Drawing.Color"/>.
            </summary>
            <remarks>The function searches first known colors, then system colors
            and then tries to convert the color from ARGB integer (hexadecimal).</remarks>
            <example>
            <p>Known colors: <c>Conversion.ColorFromString("Gray")</c></p>
            <p>System colors: <c>Conversion.ColorFromString("Control")</c></p>
            <p>ARGB value: <c>Conversion.ColorFromString("FF808080")</c></p>
            </example>
            <param name="sColor">String representation of color.</param>
            <returns><see cref="T:System.Drawing.Color"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.GradientColorFromString(System.String)">
            <summary>
            Converts string representation of GradientColor to <see cref="T:Resco.Controls.Keyboard.GradientColor"/>.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.FontFromString(System.String)">
            <summary>
            Converts string representation of font to <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="sFont">String representation of font.</param>
            <returns><see cref="T:System.Drawing.Font"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.EnumFromString(System.Type,System.String)">
            <summary>
            Converts string representation of enumeration values to <see cref="T:System.Enum"/>.
            </summary>
            <remarks>The function converts the string representing the value from the enumeration.</remarks>
            <note type="caution">On compact framework the flags are not supported.</note>
            <example>
            <p>Alignment: <c>Conversion.ColorFromRectangle(typeof(Resco.Controls.DetailView.Alignment),"BottomLeft")</c></p>
            </example>
            <param name="sValue">String representation of rectangle.</param>
            <param name="enumType">Type of enumeration</param>
            <returns>Value of type <paramref name="enumType"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.StringDataFromString(System.String)">
            <summary>
            Converts the data from the comma separated strings to string array. 
            </summary>
            <param name="sData">Comma separated strings.</param>
            <returns>Array of strings.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.DateTimeFromString(System.String)">
            <summary>
            Converts the data from the general format string to DateTime. 
            </summary>
            <param name="sData">DateTime represented with the string.</param>
            <returns>DateTime represented by the string.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.RectangleFromString(System.String)">
            <summary>
            Converts string representation of rectangle to <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <remarks>The function converts the comma separated values of X,Y,Width,Height.</remarks>
            <example>
            <p>Rectangle: <c>Conversion.ColorFromRectangle("0,0,50,16")</c></p>
            </example>
            <param name="sRect">String representation of rectangle.</param>
            <returns><see cref="T:System.Drawing.Rectangle"/> converted from string representation.</returns>
        </member>
        <member name="M:Resco.Controls.Keyboard.CustKeybConversion.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the property of object.
            </summary>
            <remarks>Handles special types of properties: Colors, Rectangles and CellSource.</remarks>
            <param name="obj">Object to apply.</param>
            <param name="name">Name of the property.</param>
            <param name="value">New value of the property.</param>
        </member>
        <member name="T:Resco.Controls.Keyboard.Keyboard">
            <summary>
            Keyboard class is a collection of KeyboardLayouts.
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Keyboard.OnRefreshKeyRequired(Resco.Controls.Keyboard.KeyDescriptorEventArgs)">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.Keyboard.RefreshKeyRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Keyboard.OnRefreshRequired">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.Keyboard.RefreshRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Keyboard.OnResizeRequired">
            <summary>
            Raises the <see cref="E:Resco.Controls.Keyboard.Keyboard.ResizeRequired"/> event. 
            </summary>
        </member>
        <member name="M:Resco.Controls.Keyboard.Keyboard.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Resco.Controls.Keyboard.Keyboard.Dispose" -->
        <member name="P:Resco.Controls.Keyboard.Keyboard.Item(System.Int32)">
            <summary>
            Gets or sets the Layout at the specified index within the collection.
            </summary>
            <param name="index">The index of the group in the collection to set or retrieve.</param>
        </member>
    </members>
</doc>
